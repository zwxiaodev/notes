jstack 是sun JDK 自带的工具，通过该工具可以看到JVM 中线程的运行状况，包括锁等待，线程是否在运行
执行 jstack [pid] ,线程的所有堆栈信息:

2019-01-27 18:11:27
Full thread dump Java HotSpot(TM) 64-Bit Server VM (11.0.1+13-LTS mixed mode):

"Reference Handler" #2 daemon prio=10 os_prio=0 cpu=15.09ms elapsed=19776.82s tid=0x00007f8268174000 nid=0x3f89 
   java.lang.Thread.State: RUNNABLE
    at java.lang.ref.Reference.waitForReferencePendingList(java.base@11.0.1/Native Method)
    at java.lang.ref.Reference.processPendingReferences(java.base@11.0.1/Reference.java:241)
    at java.lang.ref.Reference$ReferenceHandler.run(java.base@11.0.1/Reference.java:213)

首先第一行显示的是dump的时间，第二行是虚拟机的一些信息，接着就是线程的list，包括每个线程的tid。

紧接着就是最重要的线程栈了：

"Reference Handler"：是线程的名字

#2不知道是啥，估计是线程列表中的的第几个线程？

daemon说明是守护线程

prio=10 os_prio=0 cpu=15.09ms elapsed=19776.82s 分别是线程jvm优先级，线程操作系统优先级，cpu运行时间，实际运行时间。

tid, Java memory address of its internal Thread control structure.16进制的

nid, native thread id. 每一个nid对应于linux下的一个tid, 即lwp  (light weight process, or thread).16进制的，转到10进制后可以用ps命令找到它。

waiting on condition [0x00007f8248f2b000]  以及另一个线程的 Object.wait() [0x00007f81e41ac000]  线程运行到哪了，可以理解为线程pc计数器的位置。
