1、不要去关闭线程，而要让它自己结束（stop方法已被弃用，强制结束容易出问题）
2、synchronized优化->偏向锁：markword第一次获取锁时记录这个线程id，认为不会有第二个线程来拿这个锁，同一个线程来了，直接运行
程序征用，升级为自旋锁（默认自旋10次，占用cpu），10次以后升级为重量级锁(不占cpu)-系统锁（重量锁）
执行时间短（加锁代码）线程数少，用自旋；
执行时间长，线程数多，用系统锁
3、synchronized:能保证原子性，但是无法保证指令重排序，volatile：保证可见性和禁止重排序（内存屏蔽）
4.cas：cpu原语支持的，不能被打断的；java很多底层都是用的cas实现
5、CountdownLatch，CyclicBarrier：都是能让程序执行到某一点后再一起继续执行的功能，join也能做到这个功能
  CountdownLatch：倒数计数的门栓，只能使用一次，await()：这里会阻塞等待，知道count变为0则继续执行
  CyclicBarrier:循环栅栏，await()就好比是屏障，经过指定数量的屏障才可以执行最后的线程。或者说是一直等待，直到await()的数量是指定的数量后才会执行下面的；
  await()方法在等待所有的线程都通过了屏障，就会执行CyclicBarrier内部的线程，执行完内部线程后，子线程会继续执行。
  可以看到是分两步的： 
  第一步：所有的线程都会阻塞，然后执行CyclicBarrier内部线程； 
  第二部：CyclicBarrier内部线程执行完后，各子线程又开始继续运行。
  CyclicBarrier常用于多线程分组计算；
  CyclicBarrier(parties)：await()

  在CyclicBarrier上进行阻塞等待，直到发生以下情形之一：
    在CyclicBarrier上等待的线程数量达到parties，则所有线程被释放，继续执行。
    当前线程被中断，则抛出InterruptedException异常，并停止等待，继续执行。
    其他等待的线程被中断，则当前线程抛出BrokenBarrierException异常，并停止等待，继续执行。
    其他等待的线程超时，则当前线程抛出BrokenBarrierException异常，并停止等待，继续执行。
    其他线程调用CyclicBarrier.reset()方法，则当前线程抛出BrokenBarrierException异常，并停止等待，继续执行。
6、Phaser：分阶段执行，可以理解为CyclicBarrier的升级版：我们可以协调多个执行阶段，为每个程序阶段重用Phaser实例。每个阶段可以有不同数量的线程等待前进到另一个阶段
7、ReadWriteLock lock = new RenentrantReadWriteLock（）； //读写锁，提高效率
  Lock readLock = lock.readLock();  //共享锁
  Lock writeLock = lock.wirteLock();  //排它锁
8、Semaphore：信号量，拿到信号才能执行，acquire（）；释放信号，release（）；new Semaphore(2); //限流（车道收费站），控制职能有几个线程能执行
9、Exchanger<String> exchange = new Exchanger<>(); //交换器，交换数据，可以将一个线程的数据交换给另一个线程（自能是两个线程交换）
  exchange(值)//阻塞等待都交换了才继续执行（游戏中两个人交换装备，金币）
