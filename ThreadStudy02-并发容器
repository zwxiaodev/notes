1、ThreadLocal:线程局部变量，可以使多线程copy的主存对象修改后不让其他线程看到，成为局部变量，相当于拷贝了一份在自己的线程里，互不影响。volatile是让变量可见；
2、ThreadLocal：是使用空间换时间，synchronized：是使用时间换空间。
  ThreadLocal<T>其实是与线程绑定的一个变量。ThreadLocal和Synchonized都用于解决多线程并发访问。但是ThreadLocal与synchronized有本质的区别。
  Synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。Synchronized是利用锁的机制，使变量或代码块在某一时该只能被一个线程访问。
  而ThreadLocal为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。而Synchronized却正好相反，
  它用于在多个线程间通信时能够获得数据共享。
3、在一般情况下，从接收请求到返回响应所经过的所有程序调用都同属于一个线程。这样用户就可以根据需要，将一些非线程安全的变量以ThreadLocal存放，在同一次请求响应的调用线程中，
所有对象所访问的同一ThreadLocal变量都是当前线程所绑定的。

4、vector：同步的list，Vector<String> v = new Vector<>(); //内部的方法都是synchronized
  并发容器:队列 Queue<String> tickets = new ConcurrentLinkedQueue<String>();  //队列：单端队列，双端队列（两端都可以进和出）
  boolean isNull = tickets.poll(); //从队列头拿出一个元素，poll本身是同步的，该方法不会有同步问题，拿出来就少了一个，不存在重复读到同一个数据（相当于将判断和对队列的删除何在一个原子操作，
  CAS来实现，没有加锁，效率高）
  
5、同步容器:Map/Set/List
  //不加锁的，单线程使用
  Map<String,String> map = new HashMap<String,String>();  //非同步，单线程中使用，效率高 ；Collections.synhronizdXXX->将非同步容器封装成每个方法加sychrionized的容器返回
  Map<String,String> map = new LinkedHashMap<>(); //非同步，链表实现的map
  Map<String,String> map = new TreeMap<>(); //默认加入的数据是做排序的，效率低
  
  //加锁的容器
  Collections.synhronizdXXX
  Map<String,String> map = new HashTable<>(); //方法都是同步的，多线程中使用，锁的是整个对象，效率低（基本不用了）；并发不高可以shiy0ong
  Map<String,String> map = new ConcurrentHashMap<String,String>();  //同步，锁的是一部分数据，效率高
  Map<String,String> map = new ConcurrentSkipListMap<>(); //也排序，效率高
  
6、同步容器:List
  List<String> list =  new ArrayList<>(); //非同步，并发会出问题
  List<String> list =  new Vector<>();  //同步，线程安全
  //写实复制容器copy on write：每次写都会复制一个原来的容器，新增一个对象在后面；多线程下读效率高（不加锁），写效率极低，适合写少读多的环境；比如监听一个事件队列，add新事件，读取解析事件
  List<String> list =  new CopyOnWriteArrayList<>();  
  CopyOnWrite特点：
    一般用于读多写少的情况，用于提高读取数据的效率
    注意的是，读数据并不能保证实时性，因为读取时，读取的是旧数组的数据
    缺点是：占用内存（每添加一次就需要复制一个数据）和数据一致性问题（不能保证实时数据）
 7、同步容器:Queue(常用)
   Queue<String> queues = new ConcurrentLinkedQueue<>();    //内部加锁了的
   boolean isAdd = queues.offer();  //添加
   queues.poll(); //取出一个，将原来的删除
   queues.peek(); //取出一个，但是不删除原来的对象
   
   Queue<String> deques = new ConcurrentLinkedDeque<>();    //双端队列，两端都可以添加和取出
   
   BlockingQueue<String> blockingQueues = new LinkedBlockingQueue<>();    //阻塞队列，无界队列，无线添加
   put(）:添加满了就会阻塞
   take():取出，如果为空则阻塞
   BlockingQueue<String> arrayBlockQueues = new ArrayBlockingQueue<>(10);    //阻塞队列，有界界队列，这里容量是10
   for(int i=0;i<10;i++){
    arrayBlockQueues.add("a"+i);
   }
   arrayBlockQueues.put("aaa"); //满了后，程序会阻塞
   arrayBlockQueues.add("aaa"); //报异常，full queue队列满了
   loolean isAdd = arrayBlockQueues.offer("aaa"); //不报异常，aaa不会加入
   loolean isAdd = arrayBlockQueues.offer("aaa",1,TimeUnit.SECONDS);  //按给定的时间段阻塞，加不进去就不加了
   
   BlockingQueue<MyDelayObject> delayQueue = new DelayQueue<>(); //放入的对象，要等待一会儿才能被取走；
