1、执行器 ：Interface Executor -> execute(Runnable r) --> r.run();
2、执行器服务：Interface ExecutorService extends Executor，还增加了 submit(Runnable task) submit(Callble<T> task)：服务等待任务，执行任务
  Runnable:run()没返回值，不能抛出异常
  Callble:call()有返回值V(返回)->return Future（未来的执行结果），可以抛出异常
3、Executors：操作Executor、ExecutorService等的工具类，callable和runnable都可以应用于Executors,而hread类只支持runnable
6、java的线程池都实现了ExecutorSercice接口：线程用完了直接放回池子，不会消失
  ExecutorService fixedService = Executors.newFixedThreadPool(5);	      //线程池固定5个线程
  fixedService.execute();       //执行任务
  fixedService.shutdown();      //关闭线程池,等待所有任务都执行完毕才会关闭
  fixedService.shutdownNow();   //立即关闭线程池,不会等待所有任务都执行完毕才关闭
  fixedService.isTerminated();  //是否池子里的任务都执行完毕了
  fixedService.isShutdown();    //线程池是否关闭了，关闭了不代表任务执行完了，可能在关闭之中
  
  Future<Integer> future = fixedService.submit(()->{ //相当于 new Callable(){Integer call()}
    ……
    rerun 1；
  });
  future.get();     //阻塞，直到任务执行完返回；线程池可以用来做并行计算，大任务分成多个小任务扔到线程池，通过get阻塞拿到结果，最后统一分析结果
  future.isDone();  //是否执行完
  
7、一个线程池维护着2个队列，1个：存储还未执行的任务队列，一个存储:已经完成的任务的队列
8、线城池中的线程执行完了，线程就是空闲的状态，等待接收新任务->执行
9、FutureTask:未来的任务，有一个返回值(定义时的泛型对象，比如：Integer)
  FutureTask<Integer> futureTask = new FutureTask<Integer>(Callable<Integer> callable); //返回值是一个Integer
  FutureTask<Integer> futureTask = new FutureTask<Integer>(Runnable runnable, Integer result);
  new Thread(futureTask).start();
  Integer result = futureTask.get(); //这里一直阻塞，知道任务执行完成,返回FutureTask返回的泛型结果
10、ExecutorService cacheService = Executors.newCachedThreadPool();  //带缓存的线程池，最开始没有线程，来一个任务就new一个线程，以后就存在了（用完后，默认有一个活动时间60s,超过就被清除）
    ExecutorService singleService = Executors.newSingleThreadPoll(); //只有一个线程的线程池，作用：保证放进该线程池的任务是顺序执行的
    ExecutorService scheduleService = Executors.newScheduledThreadPoll(4); //定时器线程池；执行定时任务，类比DelayQueue
    scheduleService.scheduleAtFixedRate(()->{ //以固定的频率来执行任务
      ……
    },0,500,TimeUnit.MILLSECONDS);  //0：起始的延时时间，500：频率，最后一个是时间单位
11、ExecutorService workService = Executors.newWorkStealingPoll(); //内部使用ForkJoinPoll实现
    偷工作线程池：相当于池子里的每个线程都有一些要执行的任务，一个线程执行完所有任务，它就去偷其他线程还未执行的任务来执行；
    该线程池的线程是精灵线程（守护线程、后台线程）Daemon
    默认认根据计算机有几核则启动几个线程来执行任务；Runtime.getRuntime(). availableProcessors();
12、ForkJoinFoll forkJoinPoll = new ForkJoinPoll();  //分叉合并线程池：把大任务切成小任务(还可以再分->再分)大数据计算，最后合并每个任务的结果（分而治之）；也是Daemon线程；
    ForkJoinTask fjTask = new ForkJoinTask(); //fork/join通过fork将大任务拆分成小任务，在将小任务的结果join汇总
    
    ForkJoinPool：充当fork/join框架里面的管理者，最原始的任务都要交给它才能处理。它负责控制整个fork/join有多少个workerThread，workerThread的创建，激活都是由它来掌控。
    它还负责workQueue队列的创建和分配，每当创建一个workerThread，它负责分配相应的workQueue。然后它把接到的活都交给workerThread去处理，它可以说是整个frok/join的容器。
    ForkJoinWorkerThread：fork/join里面真正干活的"工人"，本质是一个线程。里面有一个ForkJoinPool.WorkQueue的队列存放着它要干的活，接活之前它要向ForkJoinPool注册(registerWorker)，
    拿到相应的workQueue。然后就从workQueue里面拿任务出来处理。它是依附于ForkJoinPool而存活，如果ForkJoinPool的销毁了,它也会跟着结束。
    ForkJoinPool.WorkQueue: 双端队列就是它，它负责存储接收的任务。
    ForkJoinTask：代表fork/join里面任务类型，我们一般用它的两个子类RecursiveTask、RecursiveAction。这两个区别在于RecursiveTask任务是有返回值，RecursiveAction没有返回值。
    任务的处理逻辑包括任务的切分都集中在compute()方法里面。
    
13、除了ForkJoinPool，其他线程池背后都是调用ThreadPollExecutor，可以自己创建自定义线城池;一共六种线程池
14、List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9); 
    numbers.stream().forEach(num->System.out.println(num)); //TODO:了解一下Java8 新增的特性，
    Stream 是在 Java8 新增的特性，普遍称其为流；它不是数据结构也不存放任何数据，其主要用于集合的逻辑处理。
    parallelStream提供了流的并行处理，它是Stream的另一重要特性，其底层使用Fork/Join框架实现。简单理解就是多线程异步任务的一种实现。
    串行流：适合存在线程安全问题、阻塞任务、重量级任务，以及需要使用同一事务的逻辑。
    并行流：适合没有线程安全问题、较单纯的数据处理任务。

