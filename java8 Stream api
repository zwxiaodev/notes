Java8新特性：Stream流详解：https://blog.csdn.net/weixin_38294999/article/details/89277697

1、Stream是元素的集合，这点让Stream看起来用些类似Iterator；可以支持顺序和并行的对原Stream进行汇聚的操作；可以把Stream当成一个高级版本的Iterator
2、使用Stream的基本步骤：
   1、创建Stream；
   2、转换Stream，每次转换原有Stream对象不改变，返回一个新的Stream对象（**可以有多次转换**）；
   3、对Stream进行聚合（Reduce）操作，获取想要的结果；
3、创建Stream：
  1、通过Stream接口的静态工厂方法（注意：Java8里接口可以带静态方法）；
  2、通过Collection接口的默认方法（默认方法：Default method，也是Java8中的一个新特性，就是接口中的一个带有实现的方法）–stream()，把一个Collection对象转换成Stream
  3、使用Stream静态方法来创建Stream：
    Stream<Integer> integerStream = Stream.of(1, 2, 3, 5);
    Stream<String> stringStream = Stream.of("taobao");
    Stream.generate(() -> Math.random());
    Stream.generate(Math::random);
    Stream.iterate(1, item -> item + 1).limit(10).forEach(System.out::println);
4、转换Stream：转换Stream其实就是把一个Stream通过某些行为转换成一个新的Stream
  1、distinct: 对于Stream中包含的元素进行去重操作（去重逻辑依赖元素的equals方法），新生成的Stream中没有重复的元素；
  2、filter: 对于Stream中包含的元素使用给定的过滤函数进行过滤操作，新生成的Stream只包含符合条件的元素；
  3、map: 对于Stream中包含的元素使用给定的转换函数进行转换操作，新生成的Stream只包含转换生成的元素。这个方法有三个对于原始类型的变种方法，分别是：mapToInt，mapToLong和mapToDouble。
  4、flatMap：和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中
  5、peek: 生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数；
  6、limit: 对一个Stream进行截断操作，获取其前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素；
  7、skip: 返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream，如果原Stream中包含的元素个数小于N，那么返回空Stream；
