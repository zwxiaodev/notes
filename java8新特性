一、接口的默认方法：default、static
  在接口中新增了default方法和static方法，这两种方法可以有方法体： 
  1、static方法 ：接口里的静态方法，即static修饰的有方法体的方法不会被继承或者实现，但是静态变量会被继承；
    结论：接口中的static方法不能被继承，也不能被实现类调用，只能被自身调用
  2、default方法：
    结论1：default方法可以被子接口继承亦可被其实现类所调用
    结论2：default方法被继承时，可以被子接口覆写
    结论3：如果一个类实现了多个接口，且这些接口中无继承关系，这些接口中若有相同的（同名，同参数）的default方法，则接口实现类会报错，
          接口实现类必须通过特殊语法指定该实现类要实现那个接口的default方法,(必须重写该方法)
          特殊语法：<接口>.super.<方法名>([参数]) ：DefalutTest.super.defaultMethod();
 
二、Lambda 表达式：
  Lambda表达式可以看成是匿名内部类，使用Lambda表达式时，接口必须是函数式接口（接口里只有一个abstract方法）：
    基本语法：<函数式接口>  <变量名> = (参数1，参数2...) -> { //方法体……}
    
    (参数1，参数2…)表示参数列表；->表示连接符；{}内部是方法体 
    1、=右边的类型会根据左边的函数式接口类型自动推断； 
    2、如果形参列表为空，只需保留()； 
    3、如果形参只有1个，()可以省略，只需要参数的名称即可； 
    4、如果执行语句只有1句，且无返回值，{}可以省略；若有返回值，则若想省去{}，则必须同时省略return，且执行语句也保证只有1句； 
    5、形参列表的数据类型会自动推断； 
    6、lambda不会生成一个单独的内部类文件； 
    7、lambda表达式若访问了局部变量，则局部变量必须是final的，若是局部变量没有加final关键字，系统会自动添加，此后在修改该局部变量，会报错；
    
三、函数式接口
  1、如果一个接口只有一个抽象方法，则该接口称之为函数式接口，因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。 
  2、函数式接口可以使用Lambda表达式，lambda表达式会被匹配到这个抽象方法上 
  3、我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解，编译器如果发现你标注了这个注解的接口
  有多于一个抽象方法的时候会报错的
  @FunctionalInterface
  interface Converter<F, T> {
      T convert(F from);
  }
……
